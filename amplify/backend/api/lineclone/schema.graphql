type User
  @model
  @auth(
    rules: [
      { allow: private, provider: userPools }
      { allow: groups, groups: ["Admin"] }
      {
        allow: owner
        ownerField: "username"
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  username: String!
  email: String!
  lineID: String
  displayName: String
  statusMessage: String
  profilePhoto: S3Object
  coverPhoto: S3Object
  phoneNumber: String
  groups: [UserGroups] @connection(name: "UserGroups")
  blocked: [User]
  favourites: [User]
}

type Group @model {
  id: ID!
  name: String!
  users: [UserGroups] @connection(name: "GroupUsers")
  messages: [Message] @connection(name: "GroupUsers")
  isDirect: Boolean!
  announce: [Message] @connection(name: "GroupUsers")
  files: S3Object
}

type UserGroups @model(queries: null) {
  id: ID!
  user: User @connection(name: "UserGroups")
  group: Group @connection(name: "GroupUsers")
}

type Message
  @model
  @key(
    name: "messageByDate"
    fields: ["type", "createdAt"]
    queryField: "messageByDate"
  ) {
  id: ID!
  user: User @connection(name: "UserGroups")
  group: Group @connection(name: "GroupUsers")
  type: String!
  message: String!
  media: [String]
  createdAt: String!
  isBlock: Boolean!
  hasRead: Boolean
  isCall: Boolean
  isDeclineCall: Boolean
  receiver: User @connection
}

type S3Object {
  bucket: String!
  region: String!
  key: String!
}

type Subscription {
  newOnCreateMessage: Message @aws_subscribe(mutations: ["createMessage"])
  newOnUpdateMessage: Message @aws_subscribe(mutations: ["updateMessage"])
  newOnUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
}
